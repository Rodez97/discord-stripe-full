"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sapphire";
exports.ids = ["vendor-chunks/@sapphire"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@sapphire/async-queue/dist/esm/index.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@sapphire/async-queue/dist/esm/index.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncQueue: () => (/* binding */ AsyncQueue)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n// src/lib/AsyncQueueEntry.ts\nvar _AsyncQueueEntry = class _AsyncQueueEntry {\n    constructor(queue){\n        __publicField(this, \"promise\");\n        __publicField(this, \"resolve\");\n        __publicField(this, \"reject\");\n        __publicField(this, \"queue\");\n        __publicField(this, \"signal\", null);\n        __publicField(this, \"signalListener\", null);\n        this.queue = queue;\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n    setSignal(signal) {\n        if (signal.aborted) return this;\n        this.signal = signal;\n        this.signalListener = ()=>{\n            const index = this.queue[\"promises\"].indexOf(this);\n            if (index !== -1) this.queue[\"promises\"].splice(index, 1);\n            this.reject(new Error(\"Request aborted manually\"));\n        };\n        this.signal.addEventListener(\"abort\", this.signalListener);\n        return this;\n    }\n    use() {\n        this.dispose();\n        this.resolve();\n        return this;\n    }\n    abort() {\n        this.dispose();\n        this.reject(new Error(\"Request aborted manually\"));\n        return this;\n    }\n    dispose() {\n        if (this.signal) {\n            this.signal.removeEventListener(\"abort\", this.signalListener);\n            this.signal = null;\n            this.signalListener = null;\n        }\n    }\n};\n__name(_AsyncQueueEntry, \"AsyncQueueEntry\");\nvar AsyncQueueEntry = _AsyncQueueEntry;\n// src/lib/AsyncQueue.ts\nvar _AsyncQueue = class _AsyncQueue {\n    constructor(){\n        /**\n     * The promises array\n     */ __publicField(this, \"promises\", []);\n    }\n    /**\n   * The amount of entries in the queue, including the head.\n   * @seealso {@link queued} for the queued count.\n   */ get remaining() {\n        return this.promises.length;\n    }\n    /**\n   * The amount of queued entries.\n   * @seealso {@link remaining} for the count with the head.\n   */ get queued() {\n        return this.remaining === 0 ? 0 : this.remaining - 1;\n    }\n    /**\n   * Waits for last promise and queues a new one\n   * @example\n   * ```typescript\n   * const queue = new AsyncQueue();\n   * async function request(url, options) {\n   *     await queue.wait({ signal: options.signal });\n   *     try {\n   *         const result = await fetch(url, options);\n   *         // Do some operations with 'result'\n   *     } finally {\n   *         // Remove first entry from the queue and resolve for the next entry\n   *         queue.shift();\n   *     }\n   * }\n   *\n   * request(someUrl1, someOptions1); // Will call fetch() immediately\n   * request(someUrl2, someOptions2); // Will call fetch() after the first finished\n   * request(someUrl3, someOptions3); // Will call fetch() after the second finished\n   * ```\n   */ wait(options) {\n        const entry = new AsyncQueueEntry(this);\n        if (this.promises.length === 0) {\n            this.promises.push(entry);\n            return Promise.resolve();\n        }\n        this.promises.push(entry);\n        if (options?.signal) entry.setSignal(options.signal);\n        return entry.promise;\n    }\n    /**\n   * Unlocks the head lock and transfers the next lock (if any) to the head.\n   */ shift() {\n        if (this.promises.length === 0) return;\n        if (this.promises.length === 1) {\n            this.promises.shift();\n            return;\n        }\n        this.promises.shift();\n        this.promises[0].use();\n    }\n    /**\n   * Aborts all the pending promises.\n   * @note To avoid race conditions, this does **not** unlock the head lock.\n   */ abortAll() {\n        if (this.queued === 0) return;\n        for(let i = 1; i < this.promises.length; ++i){\n            this.promises[i].abort();\n        }\n        this.promises.length = 1;\n    }\n};\n__name(_AsyncQueue, \"AsyncQueue\");\nvar AsyncQueue = _AsyncQueue;\n //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@sapphire/async-queue/dist/esm/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@sapphire/snowflake/dist/esm/index.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@sapphire/snowflake/dist/esm/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiscordSnowflake: () => (/* binding */ DiscordSnowflake),\n/* harmony export */   MaximumIncrement: () => (/* binding */ MaximumIncrement),\n/* harmony export */   MaximumProcessId: () => (/* binding */ MaximumProcessId),\n/* harmony export */   MaximumWorkerId: () => (/* binding */ MaximumWorkerId),\n/* harmony export */   Snowflake: () => (/* binding */ Snowflake),\n/* harmony export */   TwitterSnowflake: () => (/* binding */ TwitterSnowflake)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n// src/lib/Snowflake.ts\nvar IncrementSymbol = Symbol(\"@sapphire/snowflake.increment\");\nvar EpochSymbol = Symbol(\"@sapphire/snowflake.epoch\");\nvar ProcessIdSymbol = Symbol(\"@sapphire/snowflake.processId\");\nvar WorkerIdSymbol = Symbol(\"@sapphire/snowflake.workerId\");\nvar MaximumWorkerId = 0b11111n;\nvar MaximumProcessId = 0b11111n;\nvar MaximumIncrement = 0b111111111111n;\nvar _a, _b, _c, _d;\nvar _Snowflake = class _Snowflake {\n    /**\n   * @param epoch the epoch to use\n   */ constructor(epoch){\n        /**\n     * Alias for {@link deconstruct}\n     */ // eslint-disable-next-line @typescript-eslint/unbound-method\n        __publicField(this, \"decode\", this.deconstruct);\n        /**\n     * Internal reference of the epoch passed in the constructor\n     * @internal\n     */ __publicField(this, _a);\n        /**\n     * Internal incrementor for generating snowflakes\n     * @internal\n     */ __publicField(this, _b, 0n);\n        /**\n     * The process ID that will be used by default in the generate method\n     * @internal\n     */ __publicField(this, _c, 1n);\n        /**\n     * The worker ID that will be used by default in the generate method\n     * @internal\n     */ __publicField(this, _d, 0n);\n        this[EpochSymbol] = BigInt(epoch instanceof Date ? epoch.getTime() : epoch);\n    }\n    /**\n   * The epoch for this snowflake\n   */ get epoch() {\n        return this[EpochSymbol];\n    }\n    /**\n   * Gets the configured process ID\n   */ get processId() {\n        return this[ProcessIdSymbol];\n    }\n    /**\n   * Sets the process ID that will be used by default for the {@link generate} method\n   * @param value The new value, will be coerced to BigInt and masked with `0b11111n`\n   */ set processId(value) {\n        this[ProcessIdSymbol] = BigInt(value) & MaximumProcessId;\n    }\n    /**\n   * Gets the configured worker ID\n   */ get workerId() {\n        return this[WorkerIdSymbol];\n    }\n    /**\n   * Sets the worker ID that will be used by default for the {@link generate} method\n   * @param value The new value, will be coerced to BigInt and masked with `0b11111n`\n   */ set workerId(value) {\n        this[WorkerIdSymbol] = BigInt(value) & MaximumWorkerId;\n    }\n    /**\n   * Generates a snowflake given an epoch and optionally a timestamp\n   * @param options options to pass into the generator, see {@link SnowflakeGenerateOptions}\n   *\n   * **note** when `increment` is not provided it defaults to the private `increment` of the instance\n   * @example\n   * ```typescript\n   * const epoch = new Date('2000-01-01T00:00:00.000Z');\n   * const snowflake = new Snowflake(epoch).generate();\n   * ```\n   * @returns A unique snowflake\n   */ generate({ increment, timestamp = Date.now(), workerId = this[WorkerIdSymbol], processId = this[ProcessIdSymbol] } = {}) {\n        if (timestamp instanceof Date) timestamp = BigInt(timestamp.getTime());\n        else if (typeof timestamp === \"number\") timestamp = BigInt(timestamp);\n        else if (typeof timestamp !== \"bigint\") {\n            throw new TypeError(`\"timestamp\" argument must be a number, bigint, or Date (received ${typeof timestamp})`);\n        }\n        if (typeof increment !== \"bigint\") {\n            increment = this[IncrementSymbol];\n            this[IncrementSymbol] = increment + 1n & MaximumIncrement;\n        }\n        return timestamp - this[EpochSymbol] << 22n | (workerId & MaximumWorkerId) << 17n | (processId & MaximumProcessId) << 12n | increment & MaximumIncrement;\n    }\n    /**\n   * Deconstructs a snowflake given a snowflake ID\n   * @param id the snowflake to deconstruct\n   * @returns a deconstructed snowflake\n   * @example\n   * ```typescript\n   * const epoch = new Date('2000-01-01T00:00:00.000Z');\n   * const snowflake = new Snowflake(epoch).deconstruct('3971046231244935168');\n   * ```\n   */ deconstruct(id) {\n        const bigIntId = BigInt(id);\n        const epoch = this[EpochSymbol];\n        return {\n            id: bigIntId,\n            timestamp: (bigIntId >> 22n) + epoch,\n            workerId: bigIntId >> 17n & MaximumWorkerId,\n            processId: bigIntId >> 12n & MaximumProcessId,\n            increment: bigIntId & MaximumIncrement,\n            epoch\n        };\n    }\n    /**\n   * Retrieves the timestamp field's value from a snowflake.\n   * @param id The snowflake to get the timestamp value from.\n   * @returns The UNIX timestamp that is stored in `id`.\n   */ timestampFrom(id) {\n        return Number((BigInt(id) >> 22n) + this[EpochSymbol]);\n    }\n    /**\n   * Returns a number indicating whether a reference snowflake comes before, or after, or is same as the given\n   * snowflake in sort order.\n   * @param a The first snowflake to compare.\n   * @param b The second snowflake to compare.\n   * @returns `-1` if `a` is older than `b`, `0` if `a` and `b` are equals, `1` if `a` is newer than `b`.\n   * @example Sort snowflakes in ascending order\n   * ```typescript\n   * const ids = ['737141877803057244', '1056191128120082432', '254360814063058944'];\n   * console.log(ids.sort((a, b) => Snowflake.compare(a, b)));\n   * // → ['254360814063058944', '737141877803057244', '1056191128120082432'];\n   * ```\n   * @example Sort snowflakes in descending order\n   * ```typescript\n   * const ids = ['737141877803057244', '1056191128120082432', '254360814063058944'];\n   * console.log(ids.sort((a, b) => -Snowflake.compare(a, b)));\n   * // → ['1056191128120082432', '737141877803057244', '254360814063058944'];\n   * ```\n   */ static compare(a, b) {\n        const typeA = typeof a;\n        return typeA === typeof b ? typeA === \"string\" ? cmpString(a, b) : cmpBigInt(a, b) : cmpBigInt(BigInt(a), BigInt(b));\n    }\n};\n_a = EpochSymbol, _b = IncrementSymbol, _c = ProcessIdSymbol, _d = WorkerIdSymbol;\n__name(_Snowflake, \"Snowflake\");\nvar Snowflake = _Snowflake;\nfunction cmpBigInt(a, b) {\n    return a === b ? 0 : a < b ? -1 : 1;\n}\n__name(cmpBigInt, \"cmpBigInt\");\nfunction cmpString(a, b) {\n    return a === b ? 0 : a.length < b.length ? -1 : a.length > b.length ? 1 : a < b ? -1 : 1;\n}\n__name(cmpString, \"cmpString\");\n// src/lib/DiscordSnowflake.ts\nvar DiscordSnowflake = new Snowflake(1420070400000n);\n// src/lib/TwitterSnowflake.ts\nvar TwitterSnowflake = new Snowflake(1288834974657n);\n //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@sapphire/snowflake/dist/esm/index.mjs\n");

/***/ })

};
;