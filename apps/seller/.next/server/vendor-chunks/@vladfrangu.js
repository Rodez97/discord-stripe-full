"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vladfrangu";
exports.ids = ["vendor-chunks/@vladfrangu"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@vladfrangu/async_event_emitter/dist/index.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@vladfrangu/async_event_emitter/dist/index.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   AsyncEventEmitter: () => (/* binding */ AsyncEventEmitter)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\n// src/index.ts\nfunction validateListener(input) {\n    if (typeof input !== \"function\") {\n        throw new TypeError(`The listener argument must be a function. Received ${typeof input}`);\n    }\n}\n__name(validateListener, \"validateListener\");\nfunction validateAbortSignal(input) {\n    if (input && !(input instanceof AbortSignal)) {\n        throw new TypeError(`The signal option must be an AbortSignal. Received ${input}`);\n    }\n}\n__name(validateAbortSignal, \"validateAbortSignal\");\nfunction spliceOne(list, index) {\n    for(; index + 1 < list.length; index++){\n        list[index] = list[index + 1];\n    }\n    list.pop();\n}\n__name(spliceOne, \"spliceOne\");\nfunction arrayClone(arr) {\n    switch(arr.length){\n        case 2:\n            return [\n                arr[0],\n                arr[1]\n            ];\n        case 3:\n            return [\n                arr[0],\n                arr[1],\n                arr[2]\n            ];\n        case 4:\n            return [\n                arr[0],\n                arr[1],\n                arr[2],\n                arr[3]\n            ];\n        case 5:\n            return [\n                arr[0],\n                arr[1],\n                arr[2],\n                arr[3],\n                arr[4]\n            ];\n        case 6:\n            return [\n                arr[0],\n                arr[1],\n                arr[2],\n                arr[3],\n                arr[4],\n                arr[5]\n            ];\n    }\n    return arr.slice();\n}\n__name(arrayClone, \"arrayClone\");\nfunction identicalSequenceRange(a, b) {\n    for(let i = 0; i < a.length - 3; i++){\n        const pos = b.indexOf(a[i]);\n        if (pos !== -1) {\n            const rest = b.length - pos;\n            if (rest > 3) {\n                let len = 1;\n                const maxLen = Math.min(a.length - i, rest);\n                while(maxLen > len && a[i + len] === b[pos + len]){\n                    len++;\n                }\n                if (len > 3) {\n                    return [\n                        len,\n                        i\n                    ];\n                }\n            }\n        }\n    }\n    return [\n        0,\n        0\n    ];\n}\n__name(identicalSequenceRange, \"identicalSequenceRange\");\nfunction enhanceStackTrace(err, own) {\n    let ctorInfo = \"\";\n    try {\n        const { name } = this.constructor;\n        if (name !== \"AsyncEventEmitter\") ctorInfo = ` on ${name} instance`;\n    } catch  {}\n    const sep = `\nEmitted 'error' event${ctorInfo} at:\n`;\n    const errStack = err.stack.split(\"\\n\").slice(1);\n    const ownStack = own.stack.split(\"\\n\").slice(1);\n    const { 0: len, 1: off } = identicalSequenceRange(ownStack, errStack);\n    if (len > 0) {\n        ownStack.splice(off + 1, len - 2, \"    [... lines matching original stack trace ...]\");\n    }\n    return err.stack + sep + ownStack.join(\"\\n\");\n}\n__name(enhanceStackTrace, \"enhanceStackTrace\");\nvar _AsyncEventEmitter = class _AsyncEventEmitter {\n    constructor(){\n        this._events = {\n            __proto__: null\n        };\n        this._eventCount = 0;\n        this._maxListeners = 10;\n        this._internalPromiseMap = /* @__PURE__ */ new Map();\n        this._wrapperId = 0n;\n    }\n    addListener(eventName, listener) {\n        validateListener(listener);\n        const wrapped = this._wrapListener(eventName, listener, false);\n        this._addListener(eventName, wrapped, false);\n        return this;\n    }\n    on(eventName, listener) {\n        return this.addListener(eventName, listener);\n    }\n    once(eventName, listener) {\n        validateListener(listener);\n        const wrapped = this._wrapListener(eventName, listener, true);\n        this._addListener(eventName, wrapped, false);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        validateListener(listener);\n        const events = this._events;\n        const eventList = events[eventName];\n        if (eventList === void 0) {\n            return this;\n        }\n        if (eventList === listener || eventList.listener === listener) {\n            if (--this._eventCount === 0) {\n                this._events = {\n                    __proto__: null\n                };\n            } else {\n                delete events[eventName];\n                if (events.removeListener) {\n                    this.emit(\"removeListener\", eventName, eventList.listener ?? eventList);\n                }\n            }\n        } else if (typeof eventList !== \"function\") {\n            let position = -1;\n            for(let i = eventList.length - 1; i >= 0; i--){\n                if (eventList[i] === listener || eventList[i].listener === listener) {\n                    position = i;\n                    break;\n                }\n            }\n            if (position < 0) {\n                return this;\n            }\n            if (position === 0) {\n                eventList.shift();\n            } else {\n                spliceOne(eventList, position);\n            }\n            if (eventList.length === 0) {\n                delete events[eventName];\n                --this._eventCount;\n            }\n            if (events.removeListener !== void 0) {\n                this.emit(\"removeListener\", eventName, listener);\n            }\n        }\n        return this;\n    }\n    off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n    }\n    removeAllListeners(event) {\n        const events = this._events;\n        if (events.removeListener === void 0) {\n            if (!event) {\n                this._events = {\n                    __proto__: null\n                };\n                this._eventCount = 0;\n            } else if (events[event] !== void 0) {\n                if (--this._eventCount === 0) {\n                    this._events = {\n                        __proto__: null\n                    };\n                } else {\n                    delete events[event];\n                }\n            }\n            return this;\n        }\n        if (!event) {\n            for (const key of Reflect.ownKeys(events)){\n                if (key === \"removeListener\") {\n                    continue;\n                }\n                this.removeAllListeners(key);\n            }\n            this.removeAllListeners(\"removeListener\");\n            this._events = {\n                __proto__: null\n            };\n            this._eventCount = 0;\n            return this;\n        }\n        const listeners = events[event];\n        if (typeof listeners === \"function\") {\n            this.removeListener(event, listeners);\n        } else if (listeners !== void 0) {\n            for(let i = listeners.length - 1; i >= 0; i--){\n                this.removeListener(event, listeners[i]);\n            }\n        }\n        return this;\n    }\n    setMaxListeners(n) {\n        if (typeof n !== \"number\" || n < 0 || Number.isNaN(n)) {\n            throw new RangeError(`Expected to get a non-negative number for \"setMaxListeners\", got ${n} instead`);\n        }\n        this._maxListeners = n;\n        return this;\n    }\n    getMaxListeners() {\n        return this._maxListeners;\n    }\n    listeners(eventName) {\n        const eventList = this._events[eventName];\n        if (eventList === void 0) {\n            return [];\n        }\n        if (typeof eventList === \"function\") {\n            return [\n                eventList.listener ?? eventList\n            ];\n        }\n        const ret = arrayClone(eventList);\n        for(let i = 0; i < ret.length; ++i){\n            const orig = ret[i].listener;\n            if (typeof orig === \"function\") {\n                ret[i] = orig;\n            }\n        }\n        return ret;\n    }\n    rawListeners(eventName) {\n        const eventList = this._events[eventName];\n        if (eventList === void 0) {\n            return [];\n        }\n        if (typeof eventList === \"function\") {\n            return [\n                eventList\n            ];\n        }\n        return arrayClone(eventList);\n    }\n    emit(eventName, ...args) {\n        let doError = eventName === \"error\";\n        const events = this._events;\n        if (events !== void 0) {\n            doError = doError && events.error === void 0;\n        } else if (!doError) {\n            return false;\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                er = args[0];\n            }\n            if (er instanceof Error) {\n                try {\n                    const capture = {};\n                    Error.captureStackTrace(capture, _AsyncEventEmitter.prototype.emit);\n                    Object.defineProperty(er, \"stack\", {\n                        value: enhanceStackTrace.call(this, er, capture),\n                        configurable: true\n                    });\n                } catch  {}\n                throw er; // Unhandled 'error' event\n            }\n            const stringifiedError = String(er);\n            const err = new Error(`Unhandled 'error' event emitted, received ${stringifiedError}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handlers = events[eventName];\n        if (handlers === void 0) {\n            return false;\n        }\n        if (typeof handlers === \"function\") {\n            const result = handlers.apply(this, args);\n            if (result !== void 0 && result !== null) {\n                handleMaybeAsync(this, result);\n            }\n        } else {\n            const len = handlers.length;\n            const listeners = arrayClone(handlers);\n            for(let i = 0; i < len; ++i){\n                const result = listeners[i].apply(this, args);\n                if (result !== void 0 && result !== null) {\n                    handleMaybeAsync(this, result);\n                }\n            }\n        }\n        return true;\n    }\n    listenerCount(eventName) {\n        const events = this._events;\n        if (events === void 0) {\n            return 0;\n        }\n        const eventListeners = events[eventName];\n        if (typeof eventListeners === \"function\") {\n            return 1;\n        }\n        return eventListeners?.length ?? 0;\n    }\n    prependListener(eventName, listener) {\n        validateListener(listener);\n        const wrapped = this._wrapListener(eventName, listener, false);\n        this._addListener(eventName, wrapped, true);\n        return this;\n    }\n    prependOnceListener(eventName, listener) {\n        validateListener(listener);\n        const wrapped = this._wrapListener(eventName, listener, true);\n        this._addListener(eventName, wrapped, true);\n        return this;\n    }\n    eventNames() {\n        return this._eventCount > 0 ? Reflect.ownKeys(this._events) : [];\n    }\n    async waitForAllListenersToComplete() {\n        const promises = [\n            ...this._internalPromiseMap.values()\n        ];\n        if (promises.length === 0) {\n            return false;\n        }\n        await Promise.all(promises);\n        return true;\n    }\n    _addListener(eventName, wrappedListener, prepend) {\n        if (this._events.newListener !== void 0) {\n            this.emit(\"newListener\", eventName, wrappedListener.listener ?? wrappedListener);\n        }\n        let existing = this._events[eventName];\n        if (existing === void 0) {\n            existing = this._events[eventName] = wrappedListener;\n            ++this._eventCount;\n        } else if (typeof existing === \"function\") {\n            existing = this._events[eventName] = prepend ? [\n                wrappedListener,\n                existing\n            ] : [\n                existing,\n                wrappedListener\n            ];\n        } else if (prepend) {\n            existing.unshift(wrappedListener);\n        } else {\n            existing.push(wrappedListener);\n        }\n        if (this._maxListeners > 0 && existing.length > this._maxListeners && !existing._hasWarnedAboutMaxListeners) {\n            existing._hasWarnedAboutMaxListeners = true;\n            const warningMessage = [\n                `Possible AsyncEventEmitter memory leak detected. ${existing.length} ${String(eventName)} listeners added to ${this.constructor.name}.`,\n                `Use emitter.setMaxListeners() to increase the limit.`\n            ].join(\" \");\n            console.warn(warningMessage);\n        }\n    }\n    _wrapListener(eventName, listener, once) {\n        if (!once) {\n            return listener;\n        }\n        const state = {\n            fired: false,\n            wrapFn: void 0,\n            eventEmitter: this,\n            eventName,\n            listener\n        };\n        const aliased = onceWrapper;\n        const wrapped = aliased.bind(state);\n        wrapped.listener = listener;\n        state.wrapFn = wrapped;\n        return wrapped;\n    }\n    static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n    }\n    static async once(emitter, eventName, options = {}) {\n        const signal = options?.signal;\n        validateAbortSignal(signal);\n        if (signal?.aborted) {\n            throw new AbortError(void 0, {\n                cause: getReason(signal)\n            });\n        }\n        return new Promise((resolve, reject)=>{\n            const errorListener = /* @__PURE__ */ __name((err)=>{\n                emitter.removeListener(eventName, resolver);\n                if (signal) {\n                    eventTargetAgnosticRemoveListener(emitter, eventName, abortListener);\n                }\n                reject(err);\n            }, \"errorListener\");\n            const resolver = /* @__PURE__ */ __name((...args)=>{\n                emitter.removeListener(\"error\", errorListener);\n                if (signal) {\n                    eventTargetAgnosticRemoveListener(signal, \"abort\", abortListener);\n                }\n                resolve(args);\n            }, \"resolver\");\n            emitter.once(eventName, resolver);\n            if (eventName !== \"error\") {\n                emitter.once(\"error\", errorListener);\n            }\n            const abortListener = /* @__PURE__ */ __name(()=>{\n                eventTargetAgnosticRemoveListener(emitter, eventName, resolver);\n                eventTargetAgnosticRemoveListener(emitter, \"error\", errorListener);\n                reject(new AbortError(void 0, {\n                    cause: getReason(signal)\n                }));\n            }, \"abortListener\");\n            if (signal) {\n                eventTargetAgnosticAddListener(signal, \"abort\", abortListener, {\n                    once: true\n                });\n            }\n        });\n    }\n    static on(emitter, eventName, options = {}) {\n        const signal = options?.signal;\n        validateAbortSignal(signal);\n        if (signal?.aborted) {\n            throw new AbortError(void 0, {\n                cause: getReason(signal)\n            });\n        }\n        const unconsumedEvents = [];\n        const unconsumedPromises = [];\n        let error = null;\n        let finished = false;\n        const abortListener = /* @__PURE__ */ __name(()=>{\n            errorHandler(new AbortError(void 0, {\n                cause: getReason(signal)\n            }));\n        }, \"abortListener\");\n        const eventHandler = /* @__PURE__ */ __name((...args)=>{\n            const promise = unconsumedPromises.shift();\n            if (promise) {\n                promise.resolve(createIterResult(args, false));\n            } else {\n                unconsumedEvents.push(args);\n            }\n        }, \"eventHandler\");\n        const errorHandler = /* @__PURE__ */ __name((err)=>{\n            finished = true;\n            const toError = unconsumedPromises.shift();\n            if (toError) {\n                toError.reject(err);\n            } else {\n                error = err;\n            }\n            void iterator.return();\n        }, \"errorHandler\");\n        const iterator = Object.setPrototypeOf({\n            next () {\n                const value = unconsumedEvents.shift();\n                if (value) {\n                    return Promise.resolve(createIterResult(value, false));\n                }\n                if (error) {\n                    const p = Promise.reject(error);\n                    error = null;\n                    return p;\n                }\n                if (finished) {\n                    return Promise.resolve(createIterResult(void 0, true));\n                }\n                return new Promise((resolve, reject)=>{\n                    unconsumedPromises.push({\n                        resolve,\n                        reject\n                    });\n                });\n            },\n            return () {\n                emitter.off(eventName, eventHandler);\n                emitter.off(\"error\", errorHandler);\n                if (signal) {\n                    eventTargetAgnosticRemoveListener(signal, \"abort\", abortListener);\n                }\n                finished = true;\n                const doneResult = createIterResult(void 0, true);\n                for (const promise of unconsumedPromises){\n                    promise.resolve(doneResult);\n                }\n                return Promise.resolve(doneResult);\n            },\n            throw (err) {\n                if (!err || !(err instanceof Error)) {\n                    throw new TypeError(`Expected Error instance to be thrown in AsyncEventEmitter.AsyncIterator. Got ${err}`);\n                }\n                error = err;\n                emitter.off(eventName, eventHandler);\n                emitter.off(\"error\", errorHandler);\n            },\n            [Symbol.asyncIterator] () {\n                return this;\n            }\n        }, AsyncIteratorPrototype);\n        emitter.on(eventName, eventHandler);\n        if (eventName !== \"error\") {\n            emitter.on(\"error\", errorHandler);\n        }\n        if (signal) {\n            eventTargetAgnosticAddListener(signal, \"abort\", abortListener);\n        }\n        return iterator;\n    }\n};\n__name(_AsyncEventEmitter, \"AsyncEventEmitter\");\nvar AsyncEventEmitter = _AsyncEventEmitter;\nfunction onceWrapper() {\n    if (!this.fired) {\n        this.eventEmitter.removeListener(this.eventName, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0) {\n            return this.listener.call(this.eventEmitter);\n        }\n        return this.listener.apply(this.eventEmitter, arguments);\n    }\n}\n__name(onceWrapper, \"onceWrapper\");\nfunction getReason(signal) {\n    return signal?.reason;\n}\n__name(getReason, \"getReason\");\nfunction eventTargetAgnosticRemoveListener(emitter, name, listener, flags) {\n    if (typeof emitter.off === \"function\") {\n        emitter.off(name, listener);\n    } else if (typeof emitter.removeEventListener === \"function\") {\n        emitter.removeEventListener(name, listener, flags);\n    }\n}\n__name(eventTargetAgnosticRemoveListener, \"eventTargetAgnosticRemoveListener\");\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n    if (typeof emitter.on === \"function\") {\n        if (flags?.once) {\n            emitter.once(name, listener);\n        } else {\n            emitter.on(name, listener);\n        }\n    } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, listener, flags);\n    }\n}\n__name(eventTargetAgnosticAddListener, \"eventTargetAgnosticAddListener\");\nvar AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);\nfunction createIterResult(value, done) {\n    return {\n        value,\n        done\n    };\n}\n__name(createIterResult, \"createIterResult\");\nvar _AbortError = class _AbortError extends Error {\n    constructor(message = \"The operation was aborted\", options = void 0){\n        if (options !== void 0 && typeof options !== \"object\") {\n            throw new TypeError(`Failed to create AbortError: options is not an object or undefined`);\n        }\n        super(message, options);\n        this.code = \"ABORT_ERR\";\n        this.name = \"AbortError\";\n    }\n};\n__name(_AbortError, \"AbortError\");\nvar AbortError = _AbortError;\nfunction handleMaybeAsync(emitter, result) {\n    try {\n        const fin = result.finally;\n        if (typeof fin === \"function\") {\n            const promiseId = String(++emitter[\"_wrapperId\"]);\n            emitter[\"_internalPromiseMap\"].set(promiseId, result);\n            fin.call(result, /* @__PURE__ */ __name(function final() {\n                emitter[\"_internalPromiseMap\"].delete(promiseId);\n            }, \"final\"));\n        }\n    } catch (err) {\n        emitter.emit(\"error\", err);\n    }\n}\n__name(handleMaybeAsync, \"handleMaybeAsync\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@vladfrangu/async_event_emitter/dist/index.mjs\n");

/***/ })

};
;